#␛[0;32mI (460) gpio: GPIO[3]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 0| Pulldown: 0| Intr:0 ␛[0m
#␛[0;32mI (460) BSP_init: GPIO_PUMP_EN: GPIO_OUTPUT_HIGH_LEVEL!␛[0m

#␛[0;32mI (470) gpio: GPIO[10]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 0| Pulldown: 0| Intr:0 ␛[0m
#␛[0;32mI (480) BSP_init: water_signal: ok!␛[0m

#␛[0;32mI (480) gpio: GPIO[1]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 0| Pulldown: 0| Intr:4 ␛[0m
#␛[0;32mI (490) BSP_init: Key_init: ok!␛[0m

#␛[0;32mI (490) gpio: GPIO[7]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 0| Pulldown: 0| Intr:0 ␛[0m
#␛[0;32mI (500) BSP_init: AlarmLed_init: ok!␛[0m

#␛[0;32mI (510) gpio: GPIO[6]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 0| Pulldown: 0| Intr:0 ␛[0m
#␛[0;32mI (520) BSP_init: WifiLed_init: ok!␛[0m

#␛[0;32mI (530) gpio: GPIO[18]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:1 ␛[0m
#␛[0;32mI (520) gpio: GPIO[19]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:0 ␛[0m


substitutions:
  name: "petlibro-plwf105"
  friendly_name: "PetLibro PLWF105"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  platformio_options:
    board_build.flash_mode: dio 
    board_build.flash_size: 4MB
    board_build.f_flash: 40000000L
  project:
    name: petlibro.plwf105
    version: "1.0.2"

esp32:
  board: esp32-c3-devkitm-1
  variant: ESP32C3
  framework:
    type: esp-idf

logger:

api:

ota:

dashboard_import:
  package_import_url: github://taylorfinnell/petlibro-esphome/plwf105/plwf105.yaml@master
  import_full_config: true

wifi:

captive_portal:

esp32_improv:
  authorizer: none

globals:
  - id: max_water_level
    type: int
    initial_value: '10000'
    restore_value: yes
  - id: min_water_level
    type: int
    initial_value: '0'
    restore_value: yes

number:
  - platform: template
    name: "Min Water level"
    optimistic: true
    min_value: -1_000_000_000
    max_value: 1_000_000_000
    step: 1
    restore_value: yes
    on_value:
      then:
        - globals.set:
            id: min_water_level
            value: !lambda 'return int(x);'


  - platform: template
    name: "Max Water level"
    optimistic: true
    min_value: -1_000_000_000
    max_value: 1_000_000_000
    step: 1
    restore_value: yes
    on_value:
      then:
        - globals.set:
            id: max_water_level
            value: !lambda 'return int(x);'

sensor:
  - platform: pulse_counter
    pin: 
      number: GPIO10
      mode: INPUT
    name: "Pump Error Counter"
    internal: true
    id: errors

  - platform: hx711
    name: "Internal Water Level"
    dout_pin:
      number: GPIO18
      mode: INPUT_PULLUP
    clk_pin:
      number: GPIO19
      mode:
        pullup: true
        output: true
    gain: 128
    update_interval: 3s
    id: water_level
    filters:
      - quantile:
          window_size: 10
          send_every: 1
          send_first_at: 1
          quantile: .9
      - lambda: |-
          if (x <= 0.1) {
            return 0.0;
          } else {
            return x;
          }

  - platform: uptime
    name: Uptime

  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s

  - platform: template
    name: Water Level
    id: water_level_percentage
    update_interval: 1s
    state_class: measurement
    unit_of_measurement: '%'
    accuracy_decimals: 1
    lambda: |-
        if(id(water_level).state >= id(max_water_level)) {
          return 0;
        }

        if(id(water_level).state <= id(min_water_level)) {
          return 0;
        }
        
        return ((id(water_level).state - id(min_water_level)) * 100) / (id(max_water_level) - id(min_water_level));

switch:
  - platform: gpio
    name: 'Pump'
    pin: 
      number: GPIO3
      mode: OUTPUT
    restore_mode: ALWAYS_ON

output:
  - platform: gpio
    id: yellow_led_output
    pin:
      number: GPIO6
      mode: OUTPUT

  - platform: gpio
    id: red_led_output
    pin: 
      number: GPIO7
      mode: OUTPUT

light:
  - platform: binary
    name: "Red LED"
    output: red_led_output
    id: red_led

  - platform: binary
    name: "Yellow LED"
    output: yellow_led_output
    id: yellow_led

text_sensor:
  - platform: version
    name: ESPHome Version

  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID

binary_sensor:
  - platform: gpio
    name: "WiFi Button"
    pin: 
      number: GPIO1
      mode: INPUT

  - platform: template
    name: "Empty"
    lambda: |-
      return id(errors).state >= 10;
    on_state:
      then:
        - lambda: |-
            if(x) { 
              id(red_led_output).turn_on();
            } else {
               id(red_led_output).turn_off();
            }
